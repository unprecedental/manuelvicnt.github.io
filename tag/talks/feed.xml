<?xml version="1.0" encoding="utf-8"?>

<feed xmlns="http://www.w3.org/2005/Atom" >
  <generator uri="https://jekyllrb.com/" version="3.8.5">Jekyll</generator>
  <link href="https://manuelvivo.dev/tag/talks/feed.xml" rel="self" type="application/atom+xml" />
  <link href="https://manuelvivo.dev/" rel="alternate" type="text/html" />
  <updated>2021-05-21T17:56:31+00:00</updated>
  <id>https://manuelvivo.dev/tag/talks/feed.xml</id>

  
  
  

  
    <title type="html">Manuel Vivo .dev | </title>
  

  
    <subtitle>A place where you can learn about Android development</subtitle>
  

  

  
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
  

  
  

  
    <entry>
      <title type="html">Going with the Flow</title>
      <link href="https://manuelvivo.dev/going-with-the-flow" rel="alternate" type="text/html" title="Going with the Flow" />
      <published>2020-11-24T00:00:00+00:00</published>
      <updated>2020-11-24T00:00:00+00:00</updated>
      <id>https://manuelvivo.dev/going-with-the-flow</id>
      <content type="html" xml:base="https://manuelvivo.dev/going-with-the-flow">&lt;p&gt;Introduction to coroutines Flow&lt;/p&gt;

&lt;h2 id=&quot;description&quot;&gt;Description&lt;/h2&gt;

&lt;p&gt;Suspend functions in Coroutines are meant for one-shot calls that could return a result. But, how can you create a stream of data to return multiple results over time? In this video of Kotlin Vocabulary, Manuel will give us the benefits of Kotlin Flow, and much more!&lt;/p&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/emk9_tVVLcc&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;h3 id=&quot;resources&quot;&gt;Resources&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://goo.gle/35PMGrh&quot;&gt;The ABC of Coroutines episode&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://d.android.com/kotlin/flow&quot;&gt;Flow documentation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://goo.gle/2wHr94N&quot;&gt;Watch more Kotlin Vocabulary&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://goo.gle/AndroidDevs&quot;&gt;Subscribe to Android Developers&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content>

      
      
      
      
      

      <author>
          <name>Manuel Vivo</name>
        
        
      </author>

      

      
        <category term="talks" />
      
        <category term="coroutines" />
      

      
        <summary type="html">Introduction to coroutines Flow</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">Android Coroutines - How to manage async tasks in Kotlin</title>
      <link href="https://manuelvivo.dev/coroutines-in-2020" rel="alternate" type="text/html" title="Android Coroutines - How to manage async tasks in Kotlin" />
      <published>2020-07-13T00:00:00+00:00</published>
      <updated>2020-07-13T00:00:00+00:00</updated>
      <id>https://manuelvivo.dev/coroutines-in-2020</id>
      <content type="html" xml:base="https://manuelvivo.dev/coroutines-in-2020">&lt;p&gt;State of coroutines on Android in 2020&lt;/p&gt;

&lt;h2 id=&quot;description&quot;&gt;Description&lt;/h2&gt;

&lt;p&gt;Take a good look at the current state of coroutines support in Android libraries and tools, explore some interesting and not-so-obvious edge cases when dealing with Kotlin code that includes coroutines and interop with Java, and briefly look at some new developments in Kotlin coroutines, namely StateFlow and its comparison with LiveData, and SharedFlow.&lt;/p&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/6manrgTPzyA&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;h3 id=&quot;resources&quot;&gt;Resources&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://goo.gle/coroutines-posts&quot;&gt;Coroutines blog posts&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://goo.gle/2R3DS9k&quot;&gt;Coroutines codelab&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://goo.gle/2R1ojz6&quot;&gt;Advanced coroutines codelab&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://goo.gle/3bMiUn8&quot;&gt;Testing coroutines talk&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://goo.gle/39wgxU8&quot;&gt;Cancellation and exceptions in coroutines&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://goo.gle/30FDT8S&quot;&gt;Check out the 11 Weeks of Android website&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://goo.gle/AndroidDevs&quot;&gt;Subscribe to Android Developers&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content>

      
      
      
      
      

      <author>
          <name>Manuel Vivo</name>
        
        
      </author>

      

      
        <category term="talks" />
      
        <category term="coroutines" />
      

      
        <summary type="html">State of coroutines on Android in 2020</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">Coroutines 101</title>
      <link href="https://manuelvivo.dev/coroutines-101-talk" rel="alternate" type="text/html" title="Coroutines 101" />
      <published>2020-04-02T00:00:00+00:00</published>
      <updated>2020-04-02T00:00:00+00:00</updated>
      <id>https://manuelvivo.dev/coroutines-101-talk</id>
      <content type="html" xml:base="https://manuelvivo.dev/coroutines-101-talk">&lt;p&gt;Introduction to the basics of coroutines&lt;/p&gt;

&lt;h2 id=&quot;description&quot;&gt;Description&lt;/h2&gt;

&lt;p&gt;Manuel Vivo, Android Engineer from the Developer Relations team at Google, gives an introduction to Kotlin Coroutines. Stay tuned to find out about the problems coroutines are trying to solve, how to use coroutines in Android, how to test them, and much more!&lt;/p&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/ZTDXo0-SKuU&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;h3 id=&quot;resources&quot;&gt;Resources&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://goo.gle/2R3DS9k&quot;&gt;Coroutines codelab&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://goo.gle/2R1ojz6&quot;&gt;Advanced coroutines codelab&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://goo.gle/3bMiUn8&quot;&gt;Testing coroutines talk&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://goo.gle/39wgxU8&quot;&gt;Cancellation and exceptions in coroutines&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://goo.gle/2WmhoEb&quot;&gt;Android Conference Talks playlist&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://goo.gle/AndroidDevs&quot;&gt;Subscribe to Android Developers&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content>

      
      
      
      
      

      <author>
          <name>Manuel Vivo</name>
        
        
      </author>

      

      
        <category term="talks" />
      
        <category term="coroutines" />
      

      
        <summary type="html">Introduction to the basics of coroutines</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">Coroutines! Gotta catch ‘em all! - KotlinConf 2019</title>
      <link href="https://manuelvivo.dev/coroutines-gotta-catch-em-all" rel="alternate" type="text/html" title="Coroutines! Gotta catch 'em all! - KotlinConf 2019" />
      <published>2019-12-04T00:00:00+00:00</published>
      <updated>2019-12-04T00:00:00+00:00</updated>
      <id>https://manuelvivo.dev/coroutines-gotta-catch-em-all</id>
      <content type="html" xml:base="https://manuelvivo.dev/coroutines-gotta-catch-em-all">&lt;p&gt;All about cancellation and exceptions in coroutines&lt;/p&gt;

&lt;h3 id=&quot;abstract&quot;&gt;Abstract&lt;/h3&gt;

&lt;p&gt;You’ve added coroutines to your app and everything is fine while your users are on the happy path. But what happens if you cancel a coroutine, you get a timeout or other type of error? Where do you handle it?&lt;/p&gt;

&lt;p&gt;Kotlin added structured concurrency to scope the lifetime of a coroutine. But what kind of scopes should you use? How do scopes affect error handling? Does the way you start a coroutine, using launch or async have any effect on the type of errors or the way you handle them?&lt;/p&gt;

&lt;p&gt;In this talk we’ll go over all of these use cases and show how they can be implemented to ensure robust error handling and a good user experience, even when you’re thrown off the happy path.&lt;/p&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/w0kfnydnFWI&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;h3 id=&quot;presenters&quot;&gt;Presenters&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://twitter.com/FMuntenescu&quot;&gt;Florina&lt;/a&gt; is working as an Android Developer Advocate at Google, helping developers architect clean, testable apps using the Architecture Components libraries. She has been working with Android for 8 years, previous work covering news at upday, payment solutions at payleven and navigation services at Garmin.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://twitter.com/manuelvicnt&quot;&gt;Manuel&lt;/a&gt; is an Android Developer Relations Engineer at Google. With previous experience at Capital One, he currently focuses on App Architecture, Kotlin &amp;amp; Coroutines, Dependency Injection and Jetpack Compose.&lt;/p&gt;</content>

      
      
      
      
      

      <author>
          <name>Manuel Vivo</name>
        
        
      </author>

      

      
        <category term="talks" />
      
        <category term="coroutines" />
      

      
        <summary type="html">All about cancellation and exceptions in coroutines</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">Testing coroutines - Android Developer Summit 2019</title>
      <link href="https://manuelvivo.dev/testing-coroutines-talk" rel="alternate" type="text/html" title="Testing coroutines - Android Developer Summit 2019" />
      <published>2019-10-24T00:00:01+00:00</published>
      <updated>2019-10-24T00:00:01+00:00</updated>
      <id>https://manuelvivo.dev/testing-coroutines-talk</id>
      <content type="html" xml:base="https://manuelvivo.dev/testing-coroutines-talk">&lt;p&gt;How to test coroutines in 2019!&lt;/p&gt;

&lt;h3 id=&quot;abstract&quot;&gt;Abstract&lt;/h3&gt;

&lt;p&gt;Coroutines simplify the way we do async programming on Android. However, testing async code has never been an easy task. In this talk, we show you how to master testing asynchronicity with coroutines to get that precious green check ✔️. Which questions do you have to ask yourself before writing a line of test code? How can you test coroutines that use Dispatchers.Main? What if you want to control the timing of your events? Why shouldn’t you use Dispatchers.Unconfined? Come and learn how to test coroutines like a pro.&lt;/p&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/KMb0Fs8rCRs&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;h3 id=&quot;presenters&quot;&gt;Presenters&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://twitter.com/objcode&quot;&gt;Sean McQuillan&lt;/a&gt; is a Developer Advocate at Google. With a decade of experience at Twilio and other San Francisco startups he is knowledgeable about building apps that scale. Sean is passionate about using great tooling to build high quality apps - quickly. When he is not working on Android you can find him fiddling on the piano or crocheting hats.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://twitter.com/manuelvicnt&quot;&gt;Manuel&lt;/a&gt; is an Android Developer Relations Engineer at Google. With previous experience at Capital One, he currently focuses on App Architecture, Kotlin &amp;amp; Coroutines, Dependency Injection and Jetpack Compose.&lt;/p&gt;</content>

      
      
      
      
      

      <author>
          <name>Manuel Vivo</name>
        
        
      </author>

      

      
        <category term="talks" />
      
        <category term="coroutines" />
      

      
        <summary type="html">How to test coroutines in 2019!</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">An opinionated guide to Dependency Injection on Android - Android Developer Summit 2019</title>
      <link href="https://manuelvivo.dev/di-guidance-android-talk" rel="alternate" type="text/html" title="An opinionated guide to Dependency Injection on Android - Android Developer Summit 2019" />
      <published>2019-10-24T00:00:00+00:00</published>
      <updated>2019-10-24T00:00:00+00:00</updated>
      <id>https://manuelvivo.dev/di-guidance-android-talk</id>
      <content type="html" xml:base="https://manuelvivo.dev/di-guidance-android-talk">&lt;p&gt;Why dependency injection is important on Android and a new guide about it!&lt;/p&gt;

&lt;h3 id=&quot;abstract&quot;&gt;Abstract&lt;/h3&gt;

&lt;p&gt;Dagger has become the recommended way to do Dependency Injection on Android. However, there are many ways to use Dagger! Come hear why we recommend Dagger, the best practices including recommended setup in multi-module projects, and what plans we have to improve Dagger in Android so that you can create a solid, extensible solution for managing dependencies in your app that scales to large projects.&lt;/p&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/o-ins1nvbDg&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;h3 id=&quot;presenters&quot;&gt;Presenters&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://twitter.com/danyaguacate&quot;&gt;Daniel&lt;/a&gt; is a Puerto Rican native currently working on the Android Toolkit team at Google. He is passionate about developing open source libraries that increase developer happiness and productivity. Daniel is a software engineer graduate from the University of Puerto Rico. He also likes video games, like a lot.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://twitter.com/manuelvicnt&quot;&gt;Manuel&lt;/a&gt; is an Android Developer Relations Engineer at Google. With previous experience at Capital One, he currently focuses on App Architecture, Kotlin &amp;amp; Coroutines, Dependency Injection and Jetpack Compose.&lt;/p&gt;</content>

      
      
      
      
      

      <author>
          <name>Manuel Vivo</name>
        
        
      </author>

      

      
        <category term="talks" />
      
        <category term="dagger" />
      

      
        <summary type="html">Why dependency injection is important on Android and a new guide about it!</summary>
      

      
      
    </entry>
  
</feed>
